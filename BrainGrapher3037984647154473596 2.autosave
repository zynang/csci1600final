// Main controller / model file for the the Processing Brain Grapher.

// See README.markdown for more info.
// See http://frontiernerds.com/brain-hack for a tutorial on getting started with the Arduino Brain Library and this Processing Brain Grapher.

// Latest source code is on https://github.com/kitschpatrol/Processing-Brain-Grapher
// Created by Eric Mika in Fall 2010, updates Spring 2012 and again in early 2014.

import processing.serial.*;

Serial serial;

Channel[] channels = new Channel[11];
Graph graph;
int disp_x, disp_y;

int packetCount = 0;
int globalMax = 0;
String scaleMode;

void setup() {
  // Set up window
  disp_x = 800;
  disp_y = 800;

  size(600, 600);
  frameRate(60);
  smooth();
  noFill();
  // Comment in for Mac
  for (int i = 0; i < Serial.list().length; i++) {
    println("[" + i + "] " + Serial.list()[i]);
  }
  serial = new Serial(this, Serial.list()[5], 9600);
  //serial = new Serial(this, Serial.list()[5], 38400);

  serial.bufferUntil(10);
  // Comment in for Windows
  //serial = new Serial(this, "COM6", 9600);

  // Create the channel objects
  channels[0] = new Channel("Signal Quality", color(0), "");
  channels[1] = new Channel("Attention", color(100), "");
  channels[2] = new Channel("Meditation", color(50), "");
  channels[3] = new Channel("Delta", color(219, 211, 42), "Dreamless Sleep");
  channels[4] = new Channel("Theta", color(245, 80, 71), "Drowsy"); // red
  channels[5] = new Channel("Low Alpha", color(237, 0, 119), "Relaxed"); // green
  channels[6] = new Channel("High Alpha", color(212, 0, 149), "Relaxed");
  channels[7] = new Channel("Low Beta", color(158, 18, 188), "Alert"); // blue
  channels[8] = new Channel("High Beta", color(116, 23, 190), "Alert");
  channels[9] = new Channel("Low Gamma", color(39, 25, 159), "Multi-sensory processing");
  channels[10] = new Channel("High Gamma", color(23, 26, 153), "???");

  // Manual override for a couple of limits.
  channels[0].minValue = 0;
  channels[0].maxValue = 200;
  channels[1].minValue = 0;
  channels[1].maxValue = 100;
  channels[2].minValue = 0;
  channels[2].maxValue = 100;
  channels[0].allowGlobal = false;
  channels[1].allowGlobal = false;
  channels[2].allowGlobal = false;



  // Set up the graph
  graph = new Graph(disp_x/2, disp_y/2, disp_x/4, disp_x/4, 0, 0, 0);

  //// Set yup the connection light
  //connectionLight = new ConnectionLight(width - 140, 10, 20);
}

void draw() {
  serialEvent(serial);
  // Keep track of global maxima
  if (scaleMode == "Global" && (channels.length > 3)) {
    for (int i = 3; i < channels.length; i++) {
      if (channels[i].maxValue > globalMax) globalMax = channels[i].maxValue;
    }
  }

  // Clear the background
  background(255);

  // Update and draw the main graph

  //graph.update();
  if (channels[0].getLatestPoint().value != 200) {
    graph.draw();
  } else {
  }
}

void serialEvent(Serial p) {
  // Split incoming packet on commas
  // See https://github.com/kitschpatrol/Arduino-Brain-Library/blob/master/README for information on the CSV packet format

  //String incomingString = p.readString().trim();
  while (p.available() >0) {
    String incomingString = p.readString();
    incomingString.trim();
    print("Received string over serial: ");

    println(incomingString);
    String[] incomingValues = split(incomingString, ',');

    if (incomingValues.length > 1) {
      packetCount++;

      // Wait till the third packet or so to start recording to avoid initialization garbage.
      if (packetCount > 3 & incomingValues.length == 11) {
        // protects against false serial reads (not all values come in at same time)
        for (int i = 0; i < incomingValues.length; i++) {
          String stringValue = incomingValues[i].trim();

          int newValue = Integer.parseInt(stringValue);


          // Zero the EEG power values if we don't have a signal.
          // Can be useful to leave them in for development.
          //if ((Integer.parseInt(incomingValues[0]) == 200) && (i > 2)) {
          //  newValue = 0;
          //}
          println(" processing: " + newValue);


          channels[i].addDataPoint(newValue);
        }
      }
    }
  }
  //  String incomingString = p.readStringUntil('\n');




  //}

  //String incomingString = p.readString();
  //String incomingString = p.readStringUntil('\n');

  //  print("Received string over serial: ");
  //  println(incomingString);

  //String[] incomingValues = split(incomingString, ',');

  // Verify that the packet looks legit
}


// Utilities

// Extend Processing's built-in map() function to support the Long datatype
long mapLong(long x, long in_min, long in_max, long out_min, long out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

// Extend Processing's built-in constrain() function to support the Long datatype
long constrainLong(long value, long min_value, long max_value) {
  if (value > max_value) return max_value;
  if (value < min_value) return min_value;
  return value;
}
